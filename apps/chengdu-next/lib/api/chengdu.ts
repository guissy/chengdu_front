// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: chengdu.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "business_system";

/** 枚举定义（与 Prisma 保持一致） */
export enum ShopType {
  SHOP_TYPE_UNSPECIFIED = "SHOP_TYPE_UNSPECIFIED",
  /** RESTAURANT - 餐饮 */
  RESTAURANT = "RESTAURANT",
  /** LIGHT_FOOD - 轻食 */
  LIGHT_FOOD = "LIGHT_FOOD",
  /** TEA_HOUSE - 茶楼 */
  TEA_HOUSE = "TEA_HOUSE",
  /** TEA_COFFEE - 茶饮/咖啡 */
  TEA_COFFEE = "TEA_COFFEE",
  /** COFFEE_SHOP - 咖啡馆 */
  COFFEE_SHOP = "COFFEE_SHOP",
  /** HOTEL - 酒店 */
  HOTEL = "HOTEL",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function shopTypeFromJSON(object: any): ShopType {
  switch (object) {
    case 0:
    case "SHOP_TYPE_UNSPECIFIED":
      return ShopType.SHOP_TYPE_UNSPECIFIED;
    case 1:
    case "RESTAURANT":
      return ShopType.RESTAURANT;
    case 2:
    case "LIGHT_FOOD":
      return ShopType.LIGHT_FOOD;
    case 3:
    case "TEA_HOUSE":
      return ShopType.TEA_HOUSE;
    case 4:
    case "TEA_COFFEE":
      return ShopType.TEA_COFFEE;
    case 5:
    case "COFFEE_SHOP":
      return ShopType.COFFEE_SHOP;
    case 6:
    case "HOTEL":
      return ShopType.HOTEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ShopType.UNRECOGNIZED;
  }
}

export function shopTypeToJSON(object: ShopType): string {
  switch (object) {
    case ShopType.SHOP_TYPE_UNSPECIFIED:
      return "SHOP_TYPE_UNSPECIFIED";
    case ShopType.RESTAURANT:
      return "RESTAURANT";
    case ShopType.LIGHT_FOOD:
      return "LIGHT_FOOD";
    case ShopType.TEA_HOUSE:
      return "TEA_HOUSE";
    case ShopType.TEA_COFFEE:
      return "TEA_COFFEE";
    case ShopType.COFFEE_SHOP:
      return "COFFEE_SHOP";
    case ShopType.HOTEL:
      return "HOTEL";
    case ShopType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function shopTypeToNumber(object: ShopType): number {
  switch (object) {
    case ShopType.SHOP_TYPE_UNSPECIFIED:
      return 0;
    case ShopType.RESTAURANT:
      return 1;
    case ShopType.LIGHT_FOOD:
      return 2;
    case ShopType.TEA_HOUSE:
      return 3;
    case ShopType.TEA_COFFEE:
      return 4;
    case ShopType.COFFEE_SHOP:
      return 5;
    case ShopType.HOTEL:
      return 6;
    case ShopType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum BusinessType {
  BUSINESS_TYPE_UNSPECIFIED = "BUSINESS_TYPE_UNSPECIFIED",
  /** INDEPENDENT - 独立自营店 */
  INDEPENDENT = "INDEPENDENT",
  /** CHAIN_DIRECT - 连锁自营店 */
  CHAIN_DIRECT = "CHAIN_DIRECT",
  /** CHAIN_FRANCHISE - 连锁加盟店 */
  CHAIN_FRANCHISE = "CHAIN_FRANCHISE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function businessTypeFromJSON(object: any): BusinessType {
  switch (object) {
    case 0:
    case "BUSINESS_TYPE_UNSPECIFIED":
      return BusinessType.BUSINESS_TYPE_UNSPECIFIED;
    case 1:
    case "INDEPENDENT":
      return BusinessType.INDEPENDENT;
    case 2:
    case "CHAIN_DIRECT":
      return BusinessType.CHAIN_DIRECT;
    case 3:
    case "CHAIN_FRANCHISE":
      return BusinessType.CHAIN_FRANCHISE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BusinessType.UNRECOGNIZED;
  }
}

export function businessTypeToJSON(object: BusinessType): string {
  switch (object) {
    case BusinessType.BUSINESS_TYPE_UNSPECIFIED:
      return "BUSINESS_TYPE_UNSPECIFIED";
    case BusinessType.INDEPENDENT:
      return "INDEPENDENT";
    case BusinessType.CHAIN_DIRECT:
      return "CHAIN_DIRECT";
    case BusinessType.CHAIN_FRANCHISE:
      return "CHAIN_FRANCHISE";
    case BusinessType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function businessTypeToNumber(object: BusinessType): number {
  switch (object) {
    case BusinessType.BUSINESS_TYPE_UNSPECIFIED:
      return 0;
    case BusinessType.INDEPENDENT:
      return 1;
    case BusinessType.CHAIN_DIRECT:
      return 2;
    case BusinessType.CHAIN_FRANCHISE:
      return 3;
    case BusinessType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum OperationDuration {
  OPERATION_DURATION_UNSPECIFIED = "OPERATION_DURATION_UNSPECIFIED",
  /** LESS_THAN_ONE - 一年内新店 */
  LESS_THAN_ONE = "LESS_THAN_ONE",
  /** ONE_TO_TWO - 1~2年 */
  ONE_TO_TWO = "ONE_TO_TWO",
  /** TWO_TO_FIVE - 2~5年 */
  TWO_TO_FIVE = "TWO_TO_FIVE",
  /** MORE_THAN_FIVE - 五年以上 */
  MORE_THAN_FIVE = "MORE_THAN_FIVE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function operationDurationFromJSON(object: any): OperationDuration {
  switch (object) {
    case 0:
    case "OPERATION_DURATION_UNSPECIFIED":
      return OperationDuration.OPERATION_DURATION_UNSPECIFIED;
    case 1:
    case "LESS_THAN_ONE":
      return OperationDuration.LESS_THAN_ONE;
    case 2:
    case "ONE_TO_TWO":
      return OperationDuration.ONE_TO_TWO;
    case 3:
    case "TWO_TO_FIVE":
      return OperationDuration.TWO_TO_FIVE;
    case 4:
    case "MORE_THAN_FIVE":
      return OperationDuration.MORE_THAN_FIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationDuration.UNRECOGNIZED;
  }
}

export function operationDurationToJSON(object: OperationDuration): string {
  switch (object) {
    case OperationDuration.OPERATION_DURATION_UNSPECIFIED:
      return "OPERATION_DURATION_UNSPECIFIED";
    case OperationDuration.LESS_THAN_ONE:
      return "LESS_THAN_ONE";
    case OperationDuration.ONE_TO_TWO:
      return "ONE_TO_TWO";
    case OperationDuration.TWO_TO_FIVE:
      return "TWO_TO_FIVE";
    case OperationDuration.MORE_THAN_FIVE:
      return "MORE_THAN_FIVE";
    case OperationDuration.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function operationDurationToNumber(object: OperationDuration): number {
  switch (object) {
    case OperationDuration.OPERATION_DURATION_UNSPECIFIED:
      return 0;
    case OperationDuration.LESS_THAN_ONE:
      return 1;
    case OperationDuration.ONE_TO_TWO:
      return 2;
    case OperationDuration.TWO_TO_FIVE:
      return 3;
    case OperationDuration.MORE_THAN_FIVE:
      return 4;
    case OperationDuration.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum Gender {
  GENDER_UNSPECIFIED = "GENDER_UNSPECIFIED",
  /** ALL - 不限 */
  ALL = "ALL",
  /** MALE - 男 */
  MALE = "MALE",
  /** FEMALE - 女 */
  FEMALE = "FEMALE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function genderFromJSON(object: any): Gender {
  switch (object) {
    case 0:
    case "GENDER_UNSPECIFIED":
      return Gender.GENDER_UNSPECIFIED;
    case 1:
    case "ALL":
      return Gender.ALL;
    case 2:
    case "MALE":
      return Gender.MALE;
    case 3:
    case "FEMALE":
      return Gender.FEMALE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Gender.UNRECOGNIZED;
  }
}

export function genderToJSON(object: Gender): string {
  switch (object) {
    case Gender.GENDER_UNSPECIFIED:
      return "GENDER_UNSPECIFIED";
    case Gender.ALL:
      return "ALL";
    case Gender.MALE:
      return "MALE";
    case Gender.FEMALE:
      return "FEMALE";
    case Gender.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function genderToNumber(object: Gender): number {
  switch (object) {
    case Gender.GENDER_UNSPECIFIED:
      return 0;
    case Gender.ALL:
      return 1;
    case Gender.MALE:
      return 2;
    case Gender.FEMALE:
      return 3;
    case Gender.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum ContactType {
  CONTACT_TYPE_UNSPECIFIED = "CONTACT_TYPE_UNSPECIFIED",
  /** OWNER - 老板 */
  OWNER = "OWNER",
  /** MANAGER - 店长 */
  MANAGER = "MANAGER",
  /** STAFF - 店员 */
  STAFF = "STAFF",
  /** HEADQUARTERS - 总店管理人员 */
  HEADQUARTERS = "HEADQUARTERS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function contactTypeFromJSON(object: any): ContactType {
  switch (object) {
    case 0:
    case "CONTACT_TYPE_UNSPECIFIED":
      return ContactType.CONTACT_TYPE_UNSPECIFIED;
    case 1:
    case "OWNER":
      return ContactType.OWNER;
    case 2:
    case "MANAGER":
      return ContactType.MANAGER;
    case 3:
    case "STAFF":
      return ContactType.STAFF;
    case 4:
    case "HEADQUARTERS":
      return ContactType.HEADQUARTERS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContactType.UNRECOGNIZED;
  }
}

export function contactTypeToJSON(object: ContactType): string {
  switch (object) {
    case ContactType.CONTACT_TYPE_UNSPECIFIED:
      return "CONTACT_TYPE_UNSPECIFIED";
    case ContactType.OWNER:
      return "OWNER";
    case ContactType.MANAGER:
      return "MANAGER";
    case ContactType.STAFF:
      return "STAFF";
    case ContactType.HEADQUARTERS:
      return "HEADQUARTERS";
    case ContactType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function contactTypeToNumber(object: ContactType): number {
  switch (object) {
    case ContactType.CONTACT_TYPE_UNSPECIFIED:
      return 0;
    case ContactType.OWNER:
      return 1;
    case ContactType.MANAGER:
      return 2;
    case ContactType.STAFF:
      return 3;
    case ContactType.HEADQUARTERS:
      return 4;
    case ContactType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum RestDay {
  REST_DAY_UNSPECIFIED = "REST_DAY_UNSPECIFIED",
  /** MONDAY - 周一 */
  MONDAY = "MONDAY",
  /** TUESDAY - 周二 */
  TUESDAY = "TUESDAY",
  /** WEDNESDAY - 周三 */
  WEDNESDAY = "WEDNESDAY",
  /** THURSDAY - 周四 */
  THURSDAY = "THURSDAY",
  /** FRIDAY - 周五 */
  FRIDAY = "FRIDAY",
  /** SATURDAY - 周六 */
  SATURDAY = "SATURDAY",
  /** SUNDAY - 周日 */
  SUNDAY = "SUNDAY",
  /** ON_DEMAND - 按需 */
  ON_DEMAND = "ON_DEMAND",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function restDayFromJSON(object: any): RestDay {
  switch (object) {
    case 0:
    case "REST_DAY_UNSPECIFIED":
      return RestDay.REST_DAY_UNSPECIFIED;
    case 1:
    case "MONDAY":
      return RestDay.MONDAY;
    case 2:
    case "TUESDAY":
      return RestDay.TUESDAY;
    case 3:
    case "WEDNESDAY":
      return RestDay.WEDNESDAY;
    case 4:
    case "THURSDAY":
      return RestDay.THURSDAY;
    case 5:
    case "FRIDAY":
      return RestDay.FRIDAY;
    case 6:
    case "SATURDAY":
      return RestDay.SATURDAY;
    case 7:
    case "SUNDAY":
      return RestDay.SUNDAY;
    case 8:
    case "ON_DEMAND":
      return RestDay.ON_DEMAND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RestDay.UNRECOGNIZED;
  }
}

export function restDayToJSON(object: RestDay): string {
  switch (object) {
    case RestDay.REST_DAY_UNSPECIFIED:
      return "REST_DAY_UNSPECIFIED";
    case RestDay.MONDAY:
      return "MONDAY";
    case RestDay.TUESDAY:
      return "TUESDAY";
    case RestDay.WEDNESDAY:
      return "WEDNESDAY";
    case RestDay.THURSDAY:
      return "THURSDAY";
    case RestDay.FRIDAY:
      return "FRIDAY";
    case RestDay.SATURDAY:
      return "SATURDAY";
    case RestDay.SUNDAY:
      return "SUNDAY";
    case RestDay.ON_DEMAND:
      return "ON_DEMAND";
    case RestDay.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function restDayToNumber(object: RestDay): number {
  switch (object) {
    case RestDay.REST_DAY_UNSPECIFIED:
      return 0;
    case RestDay.MONDAY:
      return 1;
    case RestDay.TUESDAY:
      return 2;
    case RestDay.WEDNESDAY:
      return 3;
    case RestDay.THURSDAY:
      return 4;
    case RestDay.FRIDAY:
      return 5;
    case RestDay.SATURDAY:
      return 6;
    case RestDay.SUNDAY:
      return 7;
    case RestDay.ON_DEMAND:
      return 8;
    case RestDay.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum PeakTime {
  PEAK_TIME_UNSPECIFIED = "PEAK_TIME_UNSPECIFIED",
  /** BREAKFAST - 早餐 */
  BREAKFAST = "BREAKFAST",
  /** LUNCH - 午餐 */
  LUNCH = "LUNCH",
  /** DINNER - 晚餐 */
  DINNER = "DINNER",
  /** LATE_NIGHT - 宵夜 */
  LATE_NIGHT = "LATE_NIGHT",
  /** MORNING - 上午 */
  MORNING = "MORNING",
  /** AFTERNOON - 下午 */
  AFTERNOON = "AFTERNOON",
  /** EVENING - 晚上 */
  EVENING = "EVENING",
  /** MIDNIGHT - 深夜 */
  MIDNIGHT = "MIDNIGHT",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function peakTimeFromJSON(object: any): PeakTime {
  switch (object) {
    case 0:
    case "PEAK_TIME_UNSPECIFIED":
      return PeakTime.PEAK_TIME_UNSPECIFIED;
    case 1:
    case "BREAKFAST":
      return PeakTime.BREAKFAST;
    case 2:
    case "LUNCH":
      return PeakTime.LUNCH;
    case 3:
    case "DINNER":
      return PeakTime.DINNER;
    case 4:
    case "LATE_NIGHT":
      return PeakTime.LATE_NIGHT;
    case 5:
    case "MORNING":
      return PeakTime.MORNING;
    case 6:
    case "AFTERNOON":
      return PeakTime.AFTERNOON;
    case 7:
    case "EVENING":
      return PeakTime.EVENING;
    case 8:
    case "MIDNIGHT":
      return PeakTime.MIDNIGHT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PeakTime.UNRECOGNIZED;
  }
}

export function peakTimeToJSON(object: PeakTime): string {
  switch (object) {
    case PeakTime.PEAK_TIME_UNSPECIFIED:
      return "PEAK_TIME_UNSPECIFIED";
    case PeakTime.BREAKFAST:
      return "BREAKFAST";
    case PeakTime.LUNCH:
      return "LUNCH";
    case PeakTime.DINNER:
      return "DINNER";
    case PeakTime.LATE_NIGHT:
      return "LATE_NIGHT";
    case PeakTime.MORNING:
      return "MORNING";
    case PeakTime.AFTERNOON:
      return "AFTERNOON";
    case PeakTime.EVENING:
      return "EVENING";
    case PeakTime.MIDNIGHT:
      return "MIDNIGHT";
    case PeakTime.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function peakTimeToNumber(object: PeakTime): number {
  switch (object) {
    case PeakTime.PEAK_TIME_UNSPECIFIED:
      return 0;
    case PeakTime.BREAKFAST:
      return 1;
    case PeakTime.LUNCH:
      return 2;
    case PeakTime.DINNER:
      return 3;
    case PeakTime.LATE_NIGHT:
      return 4;
    case PeakTime.MORNING:
      return 5;
    case PeakTime.AFTERNOON:
      return 6;
    case PeakTime.EVENING:
      return 7;
    case PeakTime.MIDNIGHT:
      return 8;
    case PeakTime.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum Season {
  SEASON_UNSPECIFIED = "SEASON_UNSPECIFIED",
  /** SPRING - 春 */
  SPRING = "SPRING",
  /** SUMMER - 夏 */
  SUMMER = "SUMMER",
  /** AUTUMN - 秋 */
  AUTUMN = "AUTUMN",
  /** WINTER - 冬 */
  WINTER = "WINTER",
  /** HOLIDAY - 节假日 */
  HOLIDAY = "HOLIDAY",
  /** WORKDAY - 工作日 */
  WORKDAY = "WORKDAY",
  /** NON_WORKDAY - 非工作日 */
  NON_WORKDAY = "NON_WORKDAY",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function seasonFromJSON(object: any): Season {
  switch (object) {
    case 0:
    case "SEASON_UNSPECIFIED":
      return Season.SEASON_UNSPECIFIED;
    case 1:
    case "SPRING":
      return Season.SPRING;
    case 2:
    case "SUMMER":
      return Season.SUMMER;
    case 3:
    case "AUTUMN":
      return Season.AUTUMN;
    case 4:
    case "WINTER":
      return Season.WINTER;
    case 5:
    case "HOLIDAY":
      return Season.HOLIDAY;
    case 6:
    case "WORKDAY":
      return Season.WORKDAY;
    case 7:
    case "NON_WORKDAY":
      return Season.NON_WORKDAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Season.UNRECOGNIZED;
  }
}

export function seasonToJSON(object: Season): string {
  switch (object) {
    case Season.SEASON_UNSPECIFIED:
      return "SEASON_UNSPECIFIED";
    case Season.SPRING:
      return "SPRING";
    case Season.SUMMER:
      return "SUMMER";
    case Season.AUTUMN:
      return "AUTUMN";
    case Season.WINTER:
      return "WINTER";
    case Season.HOLIDAY:
      return "HOLIDAY";
    case Season.WORKDAY:
      return "WORKDAY";
    case Season.NON_WORKDAY:
      return "NON_WORKDAY";
    case Season.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function seasonToNumber(object: Season): number {
  switch (object) {
    case Season.SEASON_UNSPECIFIED:
      return 0;
    case Season.SPRING:
      return 1;
    case Season.SUMMER:
      return 2;
    case Season.AUTUMN:
      return 3;
    case Season.WINTER:
      return 4;
    case Season.HOLIDAY:
      return 5;
    case Season.WORKDAY:
      return 6;
    case Season.NON_WORKDAY:
      return 7;
    case Season.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum SpaceType {
  SPACE_TYPE_UNSPECIFIED = "SPACE_TYPE_UNSPECIFIED",
  /** TABLE_STICKER - 方桌不干胶贴 */
  TABLE_STICKER = "TABLE_STICKER",
  /** TABLE_PLACEMAT - 方桌餐垫纸 */
  TABLE_PLACEMAT = "TABLE_PLACEMAT",
  /** STAND - 立牌 */
  STAND = "STAND",
  /** X_BANNER - X展架 */
  X_BANNER = "X_BANNER",
  /** TV_LED - 电视/LED屏幕 */
  TV_LED = "TV_LED",
  /** PROJECTOR - 投影仪 */
  PROJECTOR = "PROJECTOR",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function spaceTypeFromJSON(object: any): SpaceType {
  switch (object) {
    case 0:
    case "SPACE_TYPE_UNSPECIFIED":
      return SpaceType.SPACE_TYPE_UNSPECIFIED;
    case 1:
    case "TABLE_STICKER":
      return SpaceType.TABLE_STICKER;
    case 2:
    case "TABLE_PLACEMAT":
      return SpaceType.TABLE_PLACEMAT;
    case 3:
    case "STAND":
      return SpaceType.STAND;
    case 4:
    case "X_BANNER":
      return SpaceType.X_BANNER;
    case 5:
    case "TV_LED":
      return SpaceType.TV_LED;
    case 6:
    case "PROJECTOR":
      return SpaceType.PROJECTOR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SpaceType.UNRECOGNIZED;
  }
}

export function spaceTypeToJSON(object: SpaceType): string {
  switch (object) {
    case SpaceType.SPACE_TYPE_UNSPECIFIED:
      return "SPACE_TYPE_UNSPECIFIED";
    case SpaceType.TABLE_STICKER:
      return "TABLE_STICKER";
    case SpaceType.TABLE_PLACEMAT:
      return "TABLE_PLACEMAT";
    case SpaceType.STAND:
      return "STAND";
    case SpaceType.X_BANNER:
      return "X_BANNER";
    case SpaceType.TV_LED:
      return "TV_LED";
    case SpaceType.PROJECTOR:
      return "PROJECTOR";
    case SpaceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function spaceTypeToNumber(object: SpaceType): number {
  switch (object) {
    case SpaceType.SPACE_TYPE_UNSPECIFIED:
      return 0;
    case SpaceType.TABLE_STICKER:
      return 1;
    case SpaceType.TABLE_PLACEMAT:
      return 2;
    case SpaceType.STAND:
      return 3;
    case SpaceType.X_BANNER:
      return 4;
    case SpaceType.TV_LED:
      return 5;
    case SpaceType.PROJECTOR:
      return 6;
    case SpaceType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum SpaceState {
  SPACE_STATE_UNSPECIFIED = "SPACE_STATE_UNSPECIFIED",
  /** ENABLED - 启用 */
  ENABLED = "ENABLED",
  /** DISABLED - 禁用 */
  DISABLED = "DISABLED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function spaceStateFromJSON(object: any): SpaceState {
  switch (object) {
    case 0:
    case "SPACE_STATE_UNSPECIFIED":
      return SpaceState.SPACE_STATE_UNSPECIFIED;
    case 1:
    case "ENABLED":
      return SpaceState.ENABLED;
    case 2:
    case "DISABLED":
      return SpaceState.DISABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SpaceState.UNRECOGNIZED;
  }
}

export function spaceStateToJSON(object: SpaceState): string {
  switch (object) {
    case SpaceState.SPACE_STATE_UNSPECIFIED:
      return "SPACE_STATE_UNSPECIFIED";
    case SpaceState.ENABLED:
      return "ENABLED";
    case SpaceState.DISABLED:
      return "DISABLED";
    case SpaceState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function spaceStateToNumber(object: SpaceState): number {
  switch (object) {
    case SpaceState.SPACE_STATE_UNSPECIFIED:
      return 0;
    case SpaceState.ENABLED:
      return 1;
    case SpaceState.DISABLED:
      return 2;
    case SpaceState.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum SpaceSite {
  SPACE_SITE_UNSPECIFIED = "SPACE_SITE_UNSPECIFIED",
  /** MAIN_AREA - 主客区/大堂 */
  MAIN_AREA = "MAIN_AREA",
  /** SHOP_ENTRANCE - 商家入口 */
  SHOP_ENTRANCE = "SHOP_ENTRANCE",
  /** ENTRANCE_PASSAGE - 入口通道 */
  ENTRANCE_PASSAGE = "ENTRANCE_PASSAGE",
  /** PRIVATE_ROOM - 独立房间/包间 */
  PRIVATE_ROOM = "PRIVATE_ROOM",
  /** TOILET_PASSAGE - 通往洗手间过道 */
  TOILET_PASSAGE = "TOILET_PASSAGE",
  /** TOILET - 洗手间 */
  TOILET = "TOILET",
  /** OUTDOOR_AREA - 商家外摆区/店外公共区 */
  OUTDOOR_AREA = "OUTDOOR_AREA",
  /** OUTSIDE_WALL - 店外墙面(非临街) */
  OUTSIDE_WALL = "OUTSIDE_WALL",
  /** STREET_WALL - 店外墙面(临街) */
  STREET_WALL = "STREET_WALL",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function spaceSiteFromJSON(object: any): SpaceSite {
  switch (object) {
    case 0:
    case "SPACE_SITE_UNSPECIFIED":
      return SpaceSite.SPACE_SITE_UNSPECIFIED;
    case 1:
    case "MAIN_AREA":
      return SpaceSite.MAIN_AREA;
    case 2:
    case "SHOP_ENTRANCE":
      return SpaceSite.SHOP_ENTRANCE;
    case 3:
    case "ENTRANCE_PASSAGE":
      return SpaceSite.ENTRANCE_PASSAGE;
    case 4:
    case "PRIVATE_ROOM":
      return SpaceSite.PRIVATE_ROOM;
    case 5:
    case "TOILET_PASSAGE":
      return SpaceSite.TOILET_PASSAGE;
    case 6:
    case "TOILET":
      return SpaceSite.TOILET;
    case 7:
    case "OUTDOOR_AREA":
      return SpaceSite.OUTDOOR_AREA;
    case 8:
    case "OUTSIDE_WALL":
      return SpaceSite.OUTSIDE_WALL;
    case 9:
    case "STREET_WALL":
      return SpaceSite.STREET_WALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SpaceSite.UNRECOGNIZED;
  }
}

export function spaceSiteToJSON(object: SpaceSite): string {
  switch (object) {
    case SpaceSite.SPACE_SITE_UNSPECIFIED:
      return "SPACE_SITE_UNSPECIFIED";
    case SpaceSite.MAIN_AREA:
      return "MAIN_AREA";
    case SpaceSite.SHOP_ENTRANCE:
      return "SHOP_ENTRANCE";
    case SpaceSite.ENTRANCE_PASSAGE:
      return "ENTRANCE_PASSAGE";
    case SpaceSite.PRIVATE_ROOM:
      return "PRIVATE_ROOM";
    case SpaceSite.TOILET_PASSAGE:
      return "TOILET_PASSAGE";
    case SpaceSite.TOILET:
      return "TOILET";
    case SpaceSite.OUTDOOR_AREA:
      return "OUTDOOR_AREA";
    case SpaceSite.OUTSIDE_WALL:
      return "OUTSIDE_WALL";
    case SpaceSite.STREET_WALL:
      return "STREET_WALL";
    case SpaceSite.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function spaceSiteToNumber(object: SpaceSite): number {
  switch (object) {
    case SpaceSite.SPACE_SITE_UNSPECIFIED:
      return 0;
    case SpaceSite.MAIN_AREA:
      return 1;
    case SpaceSite.SHOP_ENTRANCE:
      return 2;
    case SpaceSite.ENTRANCE_PASSAGE:
      return 3;
    case SpaceSite.PRIVATE_ROOM:
      return 4;
    case SpaceSite.TOILET_PASSAGE:
      return 5;
    case SpaceSite.TOILET:
      return 6;
    case SpaceSite.OUTDOOR_AREA:
      return 7;
    case SpaceSite.OUTSIDE_WALL:
      return 8;
    case SpaceSite.STREET_WALL:
      return 9;
    case SpaceSite.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum SpaceStability {
  SPACE_STABILITY_UNSPECIFIED = "SPACE_STABILITY_UNSPECIFIED",
  /** FIXED - 固定 */
  FIXED = "FIXED",
  /** SEMI_FIXED - 半固定 */
  SEMI_FIXED = "SEMI_FIXED",
  /** MOVABLE - 移动 */
  MOVABLE = "MOVABLE",
  /** TEMPORARY - 临时 */
  TEMPORARY = "TEMPORARY",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function spaceStabilityFromJSON(object: any): SpaceStability {
  switch (object) {
    case 0:
    case "SPACE_STABILITY_UNSPECIFIED":
      return SpaceStability.SPACE_STABILITY_UNSPECIFIED;
    case 1:
    case "FIXED":
      return SpaceStability.FIXED;
    case 2:
    case "SEMI_FIXED":
      return SpaceStability.SEMI_FIXED;
    case 3:
    case "MOVABLE":
      return SpaceStability.MOVABLE;
    case 4:
    case "TEMPORARY":
      return SpaceStability.TEMPORARY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SpaceStability.UNRECOGNIZED;
  }
}

export function spaceStabilityToJSON(object: SpaceStability): string {
  switch (object) {
    case SpaceStability.SPACE_STABILITY_UNSPECIFIED:
      return "SPACE_STABILITY_UNSPECIFIED";
    case SpaceStability.FIXED:
      return "FIXED";
    case SpaceStability.SEMI_FIXED:
      return "SEMI_FIXED";
    case SpaceStability.MOVABLE:
      return "MOVABLE";
    case SpaceStability.TEMPORARY:
      return "TEMPORARY";
    case SpaceStability.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function spaceStabilityToNumber(object: SpaceStability): number {
  switch (object) {
    case SpaceStability.SPACE_STABILITY_UNSPECIFIED:
      return 0;
    case SpaceStability.FIXED:
      return 1;
    case SpaceStability.SEMI_FIXED:
      return 2;
    case SpaceStability.MOVABLE:
      return 3;
    case SpaceStability.TEMPORARY:
      return 4;
    case SpaceStability.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum OperationType {
  OPERATION_TYPE_UNSPECIFIED = "OPERATION_TYPE_UNSPECIFIED",
  /** BROWSE - 浏览 */
  BROWSE = "BROWSE",
  /** CREATE - 新增 */
  CREATE = "CREATE",
  /** UPDATE - 编辑 */
  UPDATE = "UPDATE",
  /** DELETE - 删除 */
  DELETE = "DELETE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function operationTypeFromJSON(object: any): OperationType {
  switch (object) {
    case 0:
    case "OPERATION_TYPE_UNSPECIFIED":
      return OperationType.OPERATION_TYPE_UNSPECIFIED;
    case 1:
    case "BROWSE":
      return OperationType.BROWSE;
    case 2:
    case "CREATE":
      return OperationType.CREATE;
    case 3:
    case "UPDATE":
      return OperationType.UPDATE;
    case 4:
    case "DELETE":
      return OperationType.DELETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationType.UNRECOGNIZED;
  }
}

export function operationTypeToJSON(object: OperationType): string {
  switch (object) {
    case OperationType.OPERATION_TYPE_UNSPECIFIED:
      return "OPERATION_TYPE_UNSPECIFIED";
    case OperationType.BROWSE:
      return "BROWSE";
    case OperationType.CREATE:
      return "CREATE";
    case OperationType.UPDATE:
      return "UPDATE";
    case OperationType.DELETE:
      return "DELETE";
    case OperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function operationTypeToNumber(object: OperationType): number {
  switch (object) {
    case OperationType.OPERATION_TYPE_UNSPECIFIED:
      return 0;
    case OperationType.BROWSE:
      return 1;
    case OperationType.CREATE:
      return 2;
    case OperationType.UPDATE:
      return 3;
    case OperationType.DELETE:
      return 4;
    case OperationType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum OperationTarget {
  OPERATION_TARGET_UNSPECIFIED = "OPERATION_TARGET_UNSPECIFIED",
  /** cbd - 商圈 */
  cbd = "cbd",
  /** PART - 分区 */
  PART = "PART",
  /** POSITION - 铺位 */
  POSITION = "POSITION",
  /** SHOP - 商家 */
  SHOP = "SHOP",
  /** SPACE - 广告位 */
  SPACE = "SPACE",
  /** DASHBOARD - 仪表盘 */
  DASHBOARD = "DASHBOARD",
  /** CITY - 城市 */
  CITY = "CITY",
  /** DISTRICT - 区域 */
  DISTRICT = "DISTRICT",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function operationTargetFromJSON(object: any): OperationTarget {
  switch (object) {
    case 0:
    case "OPERATION_TARGET_UNSPECIFIED":
      return OperationTarget.OPERATION_TARGET_UNSPECIFIED;
    case 1:
    case "cbd":
      return OperationTarget.cbd;
    case 2:
    case "PART":
      return OperationTarget.PART;
    case 3:
    case "POSITION":
      return OperationTarget.POSITION;
    case 4:
    case "SHOP":
      return OperationTarget.SHOP;
    case 5:
    case "SPACE":
      return OperationTarget.SPACE;
    case 6:
    case "DASHBOARD":
      return OperationTarget.DASHBOARD;
    case 7:
    case "CITY":
      return OperationTarget.CITY;
    case 8:
    case "DISTRICT":
      return OperationTarget.DISTRICT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationTarget.UNRECOGNIZED;
  }
}

export function operationTargetToJSON(object: OperationTarget): string {
  switch (object) {
    case OperationTarget.OPERATION_TARGET_UNSPECIFIED:
      return "OPERATION_TARGET_UNSPECIFIED";
    case OperationTarget.cbd:
      return "cbd";
    case OperationTarget.PART:
      return "PART";
    case OperationTarget.POSITION:
      return "POSITION";
    case OperationTarget.SHOP:
      return "SHOP";
    case OperationTarget.SPACE:
      return "SPACE";
    case OperationTarget.DASHBOARD:
      return "DASHBOARD";
    case OperationTarget.CITY:
      return "CITY";
    case OperationTarget.DISTRICT:
      return "DISTRICT";
    case OperationTarget.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function operationTargetToNumber(object: OperationTarget): number {
  switch (object) {
    case OperationTarget.OPERATION_TARGET_UNSPECIFIED:
      return 0;
    case OperationTarget.cbd:
      return 1;
    case OperationTarget.PART:
      return 2;
    case OperationTarget.POSITION:
      return 3;
    case OperationTarget.SHOP:
      return 4;
    case OperationTarget.SPACE:
      return 5;
    case OperationTarget.DASHBOARD:
      return 6;
    case OperationTarget.CITY:
      return 7;
    case OperationTarget.DISTRICT:
      return 8;
    case OperationTarget.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** 城市信息 */
export interface City {
  id: string;
  name: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface CityList {
  list: City[];
}

/** 区域信息 */
export interface District {
  id: string;
  name: string;
  cityId: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

/** 商圈信息 */
export interface CBD {
  id: string;
  name: string;
  /** 可选字段，与 Prisma 的 addr? 一致 */
  addr?: string | undefined;
  districtId: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

/** 物业分区信息 */
export interface Part {
  id: string;
  name: string;
  sequence: number;
  cbdId: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

/** 铺位信息 */
export interface Position {
  id: string;
  positionNo: string;
  partId: string;
  /** Prisma 使用 Int */
  totalSpace: number;
  putSpace: number;
  priceBase: number;
  verified: boolean;
  displayed: boolean;
  /** 可选字段，与 Prisma 的 ShopType? 一致 */
  type?: ShopType | undefined;
  typeTag?: string | undefined;
  photo: string[];
  remark?: string | undefined;
  businessHours: number[];
  createdAt: Date | undefined;
  updatedAt:
    | Date
    | undefined;
  /** 可选字段，与 Prisma 的 shopId? 一致 */
  shopId?: string | undefined;
}

/** 商家信息 */
export interface Shop {
  id: string;
  shopNo: string;
  cbdId: string;
  partId: string;
  type: ShopType;
  typeTag?: string | undefined;
  businessType: BusinessType;
  trademark: string;
  branch?:
    | string
    | undefined;
  /** Prisma 使用 Float[] */
  location: number[];
  verified: boolean;
  duration: OperationDuration;
  /** Prisma 的 displayed 字段 */
  consumeDisplay: boolean;
  /** Prisma 使用 Int[] */
  averageExpense: number[];
  sex: Gender;
  age: number[];
  idTag?: string | undefined;
  signPhoto?: string | undefined;
  verifyPhoto: string[];
  environmentPhoto: string[];
  buildingPhoto: string[];
  brandPhoto: string[];
  contactName?: string | undefined;
  contactPhone?: string | undefined;
  contactType?: ContactType | undefined;
  totalArea?: number | undefined;
  customerArea?: number | undefined;
  clerkCount?: number | undefined;
  businessHours: number[];
  restDays: RestDay[];
  volumePeak: PeakTime[];
  season: Season[];
  shopDescription?: string | undefined;
  putDescription?:
    | string
    | undefined;
  /** Prisma 的 displayed */
  displayed: boolean;
  priceBase: number;
  classifyTag?: string | undefined;
  remark?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

/** 广告位信息 */
export interface Space {
  id: string;
  shopId: string;
  type: SpaceType;
  /** Prisma 使用 Json，转为 map */
  setting: { [key: string]: string };
  count: number;
  state: SpaceState;
  priceFactor: number;
  tag?: string | undefined;
  site?: SpaceSite | undefined;
  stability?: SpaceStability | undefined;
  photo: string[];
  description?: string | undefined;
  designAttention?: string | undefined;
  constructionAttention?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface Space_SettingEntry {
  key: string;
  value: string;
}

/** 审计日志 */
export interface AuditLog {
  id: string;
  operationType: OperationType;
  targetType: OperationTarget;
  targetId: string;
  targetName: string;
  content: string;
  operatorId: string;
  operatorName: string;
  operationTime:
    | Date
    | undefined;
  /** Prisma 使用 Json，转为 map */
  details: { [key: string]: string };
  ipAddress?: string | undefined;
  userAgent?: string | undefined;
}

export interface AuditLog_DetailsEntry {
  key: string;
  value: string;
}

/** 审计日志列表响应 */
export interface AuditLogList {
  items: AuditLog[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

function createBaseCity(): City {
  return { id: "", name: "", createdAt: undefined, updatedAt: undefined };
}

export const City: MessageFns<City> = {
  encode(message: City, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): City {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): City {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: City): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<City>, I>>(base?: I): City {
    return City.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<City>, I>>(object: I): City {
    const message = createBaseCity();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseCityList(): CityList {
  return { list: [] };
}

export const CityList: MessageFns<CityList> = {
  encode(message: CityList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.list) {
      City.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CityList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCityList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.list.push(City.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CityList {
    return { list: globalThis.Array.isArray(object?.list) ? object.list.map((e: any) => City.fromJSON(e)) : [] };
  },

  toJSON(message: CityList): unknown {
    const obj: any = {};
    if (message.list?.length) {
      obj.list = message.list.map((e) => City.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CityList>, I>>(base?: I): CityList {
    return CityList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CityList>, I>>(object: I): CityList {
    const message = createBaseCityList();
    message.list = object.list?.map((e) => City.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDistrict(): District {
  return { id: "", name: "", cityId: "", createdAt: undefined, updatedAt: undefined };
}

export const District: MessageFns<District> = {
  encode(message: District, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.cityId !== "") {
      writer.uint32(26).string(message.cityId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): District {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistrict();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cityId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): District {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cityId: isSet(object.cityId) ? globalThis.String(object.cityId) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: District): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cityId !== "") {
      obj.cityId = message.cityId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<District>, I>>(base?: I): District {
    return District.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<District>, I>>(object: I): District {
    const message = createBaseDistrict();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.cityId = object.cityId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseCBD(): CBD {
  return { id: "", name: "", addr: undefined, districtId: "", createdAt: undefined, updatedAt: undefined };
}

export const CBD: MessageFns<CBD> = {
  encode(message: CBD, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.addr !== undefined) {
      writer.uint32(26).string(message.addr);
    }
    if (message.districtId !== "") {
      writer.uint32(34).string(message.districtId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CBD {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCBD();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.addr = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.districtId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CBD {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      addr: isSet(object.addr) ? globalThis.String(object.addr) : undefined,
      districtId: isSet(object.districtId) ? globalThis.String(object.districtId) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: CBD): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.addr !== undefined) {
      obj.addr = message.addr;
    }
    if (message.districtId !== "") {
      obj.districtId = message.districtId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CBD>, I>>(base?: I): CBD {
    return CBD.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CBD>, I>>(object: I): CBD {
    const message = createBaseCBD();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.addr = object.addr ?? undefined;
    message.districtId = object.districtId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBasePart(): Part {
  return { id: "", name: "", sequence: 0, cbdId: "", createdAt: undefined, updatedAt: undefined };
}

export const Part: MessageFns<Part> = {
  encode(message: Part, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.sequence !== 0) {
      writer.uint32(24).int32(message.sequence);
    }
    if (message.cbdId !== "") {
      writer.uint32(34).string(message.cbdId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(42).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Part {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequence = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cbdId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Part {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
      cbdId: isSet(object.cbdId) ? globalThis.String(object.cbdId) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Part): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.cbdId !== "") {
      obj.cbdId = message.cbdId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Part>, I>>(base?: I): Part {
    return Part.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Part>, I>>(object: I): Part {
    const message = createBasePart();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.sequence = object.sequence ?? 0;
    message.cbdId = object.cbdId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBasePosition(): Position {
  return {
    id: "",
    positionNo: "",
    partId: "",
    totalSpace: 0,
    putSpace: 0,
    priceBase: 0,
    verified: false,
    displayed: false,
    type: undefined,
    typeTag: undefined,
    photo: [],
    remark: undefined,
    businessHours: [],
    createdAt: undefined,
    updatedAt: undefined,
    shopId: undefined,
  };
}

export const Position: MessageFns<Position> = {
  encode(message: Position, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.positionNo !== "") {
      writer.uint32(18).string(message.positionNo);
    }
    if (message.partId !== "") {
      writer.uint32(26).string(message.partId);
    }
    if (message.totalSpace !== 0) {
      writer.uint32(32).int32(message.totalSpace);
    }
    if (message.putSpace !== 0) {
      writer.uint32(40).int32(message.putSpace);
    }
    if (message.priceBase !== 0) {
      writer.uint32(48).int32(message.priceBase);
    }
    if (message.verified !== false) {
      writer.uint32(56).bool(message.verified);
    }
    if (message.displayed !== false) {
      writer.uint32(64).bool(message.displayed);
    }
    if (message.type !== undefined) {
      writer.uint32(72).int32(shopTypeToNumber(message.type));
    }
    if (message.typeTag !== undefined) {
      writer.uint32(82).string(message.typeTag);
    }
    for (const v of message.photo) {
      writer.uint32(90).string(v!);
    }
    if (message.remark !== undefined) {
      writer.uint32(98).string(message.remark);
    }
    writer.uint32(106).fork();
    for (const v of message.businessHours) {
      writer.int32(v);
    }
    writer.join();
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(114).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(122).fork()).join();
    }
    if (message.shopId !== undefined) {
      writer.uint32(130).string(message.shopId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.positionNo = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.partId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalSpace = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.putSpace = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.priceBase = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.displayed = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.type = shopTypeFromJSON(reader.int32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.typeTag = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.photo.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.remark = reader.string();
          continue;
        }
        case 13: {
          if (tag === 104) {
            message.businessHours.push(reader.int32());

            continue;
          }

          if (tag === 106) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.businessHours.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.shopId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      positionNo: isSet(object.positionNo) ? globalThis.String(object.positionNo) : "",
      partId: isSet(object.partId) ? globalThis.String(object.partId) : "",
      totalSpace: isSet(object.totalSpace) ? globalThis.Number(object.totalSpace) : 0,
      putSpace: isSet(object.putSpace) ? globalThis.Number(object.putSpace) : 0,
      priceBase: isSet(object.priceBase) ? globalThis.Number(object.priceBase) : 0,
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
      displayed: isSet(object.displayed) ? globalThis.Boolean(object.displayed) : false,
      type: isSet(object.type) ? shopTypeFromJSON(object.type) : undefined,
      typeTag: isSet(object.typeTag) ? globalThis.String(object.typeTag) : undefined,
      photo: globalThis.Array.isArray(object?.photo) ? object.photo.map((e: any) => globalThis.String(e)) : [],
      remark: isSet(object.remark) ? globalThis.String(object.remark) : undefined,
      businessHours: globalThis.Array.isArray(object?.businessHours)
        ? object.businessHours.map((e: any) => globalThis.Number(e))
        : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      shopId: isSet(object.shopId) ? globalThis.String(object.shopId) : undefined,
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.positionNo !== "") {
      obj.positionNo = message.positionNo;
    }
    if (message.partId !== "") {
      obj.partId = message.partId;
    }
    if (message.totalSpace !== 0) {
      obj.totalSpace = Math.round(message.totalSpace);
    }
    if (message.putSpace !== 0) {
      obj.putSpace = Math.round(message.putSpace);
    }
    if (message.priceBase !== 0) {
      obj.priceBase = Math.round(message.priceBase);
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    if (message.displayed !== false) {
      obj.displayed = message.displayed;
    }
    if (message.type !== undefined) {
      obj.type = shopTypeToJSON(message.type);
    }
    if (message.typeTag !== undefined) {
      obj.typeTag = message.typeTag;
    }
    if (message.photo?.length) {
      obj.photo = message.photo;
    }
    if (message.remark !== undefined) {
      obj.remark = message.remark;
    }
    if (message.businessHours?.length) {
      obj.businessHours = message.businessHours.map((e) => Math.round(e));
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.shopId !== undefined) {
      obj.shopId = message.shopId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.id = object.id ?? "";
    message.positionNo = object.positionNo ?? "";
    message.partId = object.partId ?? "";
    message.totalSpace = object.totalSpace ?? 0;
    message.putSpace = object.putSpace ?? 0;
    message.priceBase = object.priceBase ?? 0;
    message.verified = object.verified ?? false;
    message.displayed = object.displayed ?? false;
    message.type = object.type ?? undefined;
    message.typeTag = object.typeTag ?? undefined;
    message.photo = object.photo?.map((e) => e) || [];
    message.remark = object.remark ?? undefined;
    message.businessHours = object.businessHours?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.shopId = object.shopId ?? undefined;
    return message;
  },
};

function createBaseShop(): Shop {
  return {
    id: "",
    shopNo: "",
    cbdId: "",
    partId: "",
    type: ShopType.SHOP_TYPE_UNSPECIFIED,
    typeTag: undefined,
    businessType: BusinessType.BUSINESS_TYPE_UNSPECIFIED,
    trademark: "",
    branch: undefined,
    location: [],
    verified: false,
    duration: OperationDuration.OPERATION_DURATION_UNSPECIFIED,
    consumeDisplay: false,
    averageExpense: [],
    sex: Gender.GENDER_UNSPECIFIED,
    age: [],
    idTag: undefined,
    signPhoto: undefined,
    verifyPhoto: [],
    environmentPhoto: [],
    buildingPhoto: [],
    brandPhoto: [],
    contactName: undefined,
    contactPhone: undefined,
    contactType: undefined,
    totalArea: undefined,
    customerArea: undefined,
    clerkCount: undefined,
    businessHours: [],
    restDays: [],
    volumePeak: [],
    season: [],
    shopDescription: undefined,
    putDescription: undefined,
    displayed: false,
    priceBase: 0,
    classifyTag: undefined,
    remark: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Shop: MessageFns<Shop> = {
  encode(message: Shop, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.shopNo !== "") {
      writer.uint32(18).string(message.shopNo);
    }
    if (message.cbdId !== "") {
      writer.uint32(26).string(message.cbdId);
    }
    if (message.partId !== "") {
      writer.uint32(34).string(message.partId);
    }
    if (message.type !== ShopType.SHOP_TYPE_UNSPECIFIED) {
      writer.uint32(40).int32(shopTypeToNumber(message.type));
    }
    if (message.typeTag !== undefined) {
      writer.uint32(50).string(message.typeTag);
    }
    if (message.businessType !== BusinessType.BUSINESS_TYPE_UNSPECIFIED) {
      writer.uint32(56).int32(businessTypeToNumber(message.businessType));
    }
    if (message.trademark !== "") {
      writer.uint32(66).string(message.trademark);
    }
    if (message.branch !== undefined) {
      writer.uint32(74).string(message.branch);
    }
    writer.uint32(82).fork();
    for (const v of message.location) {
      writer.float(v);
    }
    writer.join();
    if (message.verified !== false) {
      writer.uint32(88).bool(message.verified);
    }
    if (message.duration !== OperationDuration.OPERATION_DURATION_UNSPECIFIED) {
      writer.uint32(96).int32(operationDurationToNumber(message.duration));
    }
    if (message.consumeDisplay !== false) {
      writer.uint32(104).bool(message.consumeDisplay);
    }
    writer.uint32(114).fork();
    for (const v of message.averageExpense) {
      writer.int32(v);
    }
    writer.join();
    if (message.sex !== Gender.GENDER_UNSPECIFIED) {
      writer.uint32(120).int32(genderToNumber(message.sex));
    }
    writer.uint32(130).fork();
    for (const v of message.age) {
      writer.int32(v);
    }
    writer.join();
    if (message.idTag !== undefined) {
      writer.uint32(138).string(message.idTag);
    }
    if (message.signPhoto !== undefined) {
      writer.uint32(146).string(message.signPhoto);
    }
    for (const v of message.verifyPhoto) {
      writer.uint32(154).string(v!);
    }
    for (const v of message.environmentPhoto) {
      writer.uint32(162).string(v!);
    }
    for (const v of message.buildingPhoto) {
      writer.uint32(170).string(v!);
    }
    for (const v of message.brandPhoto) {
      writer.uint32(178).string(v!);
    }
    if (message.contactName !== undefined) {
      writer.uint32(186).string(message.contactName);
    }
    if (message.contactPhone !== undefined) {
      writer.uint32(194).string(message.contactPhone);
    }
    if (message.contactType !== undefined) {
      writer.uint32(200).int32(contactTypeToNumber(message.contactType));
    }
    if (message.totalArea !== undefined) {
      writer.uint32(208).int32(message.totalArea);
    }
    if (message.customerArea !== undefined) {
      writer.uint32(216).int32(message.customerArea);
    }
    if (message.clerkCount !== undefined) {
      writer.uint32(224).int32(message.clerkCount);
    }
    writer.uint32(234).fork();
    for (const v of message.businessHours) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(242).fork();
    for (const v of message.restDays) {
      writer.int32(restDayToNumber(v));
    }
    writer.join();
    writer.uint32(250).fork();
    for (const v of message.volumePeak) {
      writer.int32(peakTimeToNumber(v));
    }
    writer.join();
    writer.uint32(258).fork();
    for (const v of message.season) {
      writer.int32(seasonToNumber(v));
    }
    writer.join();
    if (message.shopDescription !== undefined) {
      writer.uint32(266).string(message.shopDescription);
    }
    if (message.putDescription !== undefined) {
      writer.uint32(274).string(message.putDescription);
    }
    if (message.displayed !== false) {
      writer.uint32(280).bool(message.displayed);
    }
    if (message.priceBase !== 0) {
      writer.uint32(288).int32(message.priceBase);
    }
    if (message.classifyTag !== undefined) {
      writer.uint32(298).string(message.classifyTag);
    }
    if (message.remark !== undefined) {
      writer.uint32(306).string(message.remark);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(314).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(322).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Shop {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShop();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shopNo = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cbdId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.partId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = shopTypeFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.typeTag = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.businessType = businessTypeFromJSON(reader.int32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.trademark = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.branch = reader.string();
          continue;
        }
        case 10: {
          if (tag === 85) {
            message.location.push(reader.float());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.location.push(reader.float());
            }

            continue;
          }

          break;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.duration = operationDurationFromJSON(reader.int32());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.consumeDisplay = reader.bool();
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.averageExpense.push(reader.int32());

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.averageExpense.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.sex = genderFromJSON(reader.int32());
          continue;
        }
        case 16: {
          if (tag === 128) {
            message.age.push(reader.int32());

            continue;
          }

          if (tag === 130) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.age.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.idTag = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.signPhoto = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.verifyPhoto.push(reader.string());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.environmentPhoto.push(reader.string());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.buildingPhoto.push(reader.string());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.brandPhoto.push(reader.string());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.contactName = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.contactPhone = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.contactType = contactTypeFromJSON(reader.int32());
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.totalArea = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.customerArea = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.clerkCount = reader.int32();
          continue;
        }
        case 29: {
          if (tag === 232) {
            message.businessHours.push(reader.int32());

            continue;
          }

          if (tag === 234) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.businessHours.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 30: {
          if (tag === 240) {
            message.restDays.push(restDayFromJSON(reader.int32()));

            continue;
          }

          if (tag === 242) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.restDays.push(restDayFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
        case 31: {
          if (tag === 248) {
            message.volumePeak.push(peakTimeFromJSON(reader.int32()));

            continue;
          }

          if (tag === 250) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.volumePeak.push(peakTimeFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
        case 32: {
          if (tag === 256) {
            message.season.push(seasonFromJSON(reader.int32()));

            continue;
          }

          if (tag === 258) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.season.push(seasonFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.shopDescription = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.putDescription = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.displayed = reader.bool();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.priceBase = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.classifyTag = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.remark = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Shop {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      shopNo: isSet(object.shopNo) ? globalThis.String(object.shopNo) : "",
      cbdId: isSet(object.cbdId) ? globalThis.String(object.cbdId) : "",
      partId: isSet(object.partId) ? globalThis.String(object.partId) : "",
      type: isSet(object.type) ? shopTypeFromJSON(object.type) : ShopType.SHOP_TYPE_UNSPECIFIED,
      typeTag: isSet(object.typeTag) ? globalThis.String(object.typeTag) : undefined,
      businessType: isSet(object.businessType)
        ? businessTypeFromJSON(object.businessType)
        : BusinessType.BUSINESS_TYPE_UNSPECIFIED,
      trademark: isSet(object.trademark) ? globalThis.String(object.trademark) : "",
      branch: isSet(object.branch) ? globalThis.String(object.branch) : undefined,
      location: globalThis.Array.isArray(object?.location) ? object.location.map((e: any) => globalThis.Number(e)) : [],
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
      duration: isSet(object.duration)
        ? operationDurationFromJSON(object.duration)
        : OperationDuration.OPERATION_DURATION_UNSPECIFIED,
      consumeDisplay: isSet(object.consumeDisplay) ? globalThis.Boolean(object.consumeDisplay) : false,
      averageExpense: globalThis.Array.isArray(object?.averageExpense)
        ? object.averageExpense.map((e: any) => globalThis.Number(e))
        : [],
      sex: isSet(object.sex) ? genderFromJSON(object.sex) : Gender.GENDER_UNSPECIFIED,
      age: globalThis.Array.isArray(object?.age) ? object.age.map((e: any) => globalThis.Number(e)) : [],
      idTag: isSet(object.idTag) ? globalThis.String(object.idTag) : undefined,
      signPhoto: isSet(object.signPhoto) ? globalThis.String(object.signPhoto) : undefined,
      verifyPhoto: globalThis.Array.isArray(object?.verifyPhoto)
        ? object.verifyPhoto.map((e: any) => globalThis.String(e))
        : [],
      environmentPhoto: globalThis.Array.isArray(object?.environmentPhoto)
        ? object.environmentPhoto.map((e: any) => globalThis.String(e))
        : [],
      buildingPhoto: globalThis.Array.isArray(object?.buildingPhoto)
        ? object.buildingPhoto.map((e: any) => globalThis.String(e))
        : [],
      brandPhoto: globalThis.Array.isArray(object?.brandPhoto)
        ? object.brandPhoto.map((e: any) => globalThis.String(e))
        : [],
      contactName: isSet(object.contactName) ? globalThis.String(object.contactName) : undefined,
      contactPhone: isSet(object.contactPhone) ? globalThis.String(object.contactPhone) : undefined,
      contactType: isSet(object.contactType) ? contactTypeFromJSON(object.contactType) : undefined,
      totalArea: isSet(object.totalArea) ? globalThis.Number(object.totalArea) : undefined,
      customerArea: isSet(object.customerArea) ? globalThis.Number(object.customerArea) : undefined,
      clerkCount: isSet(object.clerkCount) ? globalThis.Number(object.clerkCount) : undefined,
      businessHours: globalThis.Array.isArray(object?.businessHours)
        ? object.businessHours.map((e: any) => globalThis.Number(e))
        : [],
      restDays: globalThis.Array.isArray(object?.restDays)
        ? object.restDays.map((e: any) => restDayFromJSON(e))
        : [],
      volumePeak: globalThis.Array.isArray(object?.volumePeak)
        ? object.volumePeak.map((e: any) => peakTimeFromJSON(e))
        : [],
      season: globalThis.Array.isArray(object?.season)
        ? object.season.map((e: any) => seasonFromJSON(e))
        : [],
      shopDescription: isSet(object.shopDescription) ? globalThis.String(object.shopDescription) : undefined,
      putDescription: isSet(object.putDescription) ? globalThis.String(object.putDescription) : undefined,
      displayed: isSet(object.displayed) ? globalThis.Boolean(object.displayed) : false,
      priceBase: isSet(object.priceBase) ? globalThis.Number(object.priceBase) : 0,
      classifyTag: isSet(object.classifyTag) ? globalThis.String(object.classifyTag) : undefined,
      remark: isSet(object.remark) ? globalThis.String(object.remark) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Shop): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.shopNo !== "") {
      obj.shopNo = message.shopNo;
    }
    if (message.cbdId !== "") {
      obj.cbdId = message.cbdId;
    }
    if (message.partId !== "") {
      obj.partId = message.partId;
    }
    if (message.type !== ShopType.SHOP_TYPE_UNSPECIFIED) {
      obj.type = shopTypeToJSON(message.type);
    }
    if (message.typeTag !== undefined) {
      obj.typeTag = message.typeTag;
    }
    if (message.businessType !== BusinessType.BUSINESS_TYPE_UNSPECIFIED) {
      obj.businessType = businessTypeToJSON(message.businessType);
    }
    if (message.trademark !== "") {
      obj.trademark = message.trademark;
    }
    if (message.branch !== undefined) {
      obj.branch = message.branch;
    }
    if (message.location?.length) {
      obj.location = message.location;
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    if (message.duration !== OperationDuration.OPERATION_DURATION_UNSPECIFIED) {
      obj.duration = operationDurationToJSON(message.duration);
    }
    if (message.consumeDisplay !== false) {
      obj.consumeDisplay = message.consumeDisplay;
    }
    if (message.averageExpense?.length) {
      obj.averageExpense = message.averageExpense.map((e) => Math.round(e));
    }
    if (message.sex !== Gender.GENDER_UNSPECIFIED) {
      obj.sex = genderToJSON(message.sex);
    }
    if (message.age?.length) {
      obj.age = message.age.map((e) => Math.round(e));
    }
    if (message.idTag !== undefined) {
      obj.idTag = message.idTag;
    }
    if (message.signPhoto !== undefined) {
      obj.signPhoto = message.signPhoto;
    }
    if (message.verifyPhoto?.length) {
      obj.verifyPhoto = message.verifyPhoto;
    }
    if (message.environmentPhoto?.length) {
      obj.environmentPhoto = message.environmentPhoto;
    }
    if (message.buildingPhoto?.length) {
      obj.buildingPhoto = message.buildingPhoto;
    }
    if (message.brandPhoto?.length) {
      obj.brandPhoto = message.brandPhoto;
    }
    if (message.contactName !== undefined) {
      obj.contactName = message.contactName;
    }
    if (message.contactPhone !== undefined) {
      obj.contactPhone = message.contactPhone;
    }
    if (message.contactType !== undefined) {
      obj.contactType = contactTypeToJSON(message.contactType);
    }
    if (message.totalArea !== undefined) {
      obj.totalArea = Math.round(message.totalArea);
    }
    if (message.customerArea !== undefined) {
      obj.customerArea = Math.round(message.customerArea);
    }
    if (message.clerkCount !== undefined) {
      obj.clerkCount = Math.round(message.clerkCount);
    }
    if (message.businessHours?.length) {
      obj.businessHours = message.businessHours.map((e) => Math.round(e));
    }
    if (message.restDays?.length) {
      obj.restDays = message.restDays.map((e) => restDayToJSON(e));
    }
    if (message.volumePeak?.length) {
      obj.volumePeak = message.volumePeak.map((e) => peakTimeToJSON(e));
    }
    if (message.season?.length) {
      obj.season = message.season.map((e) => seasonToJSON(e));
    }
    if (message.shopDescription !== undefined) {
      obj.shopDescription = message.shopDescription;
    }
    if (message.putDescription !== undefined) {
      obj.putDescription = message.putDescription;
    }
    if (message.displayed !== false) {
      obj.displayed = message.displayed;
    }
    if (message.priceBase !== 0) {
      obj.priceBase = Math.round(message.priceBase);
    }
    if (message.classifyTag !== undefined) {
      obj.classifyTag = message.classifyTag;
    }
    if (message.remark !== undefined) {
      obj.remark = message.remark;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Shop>, I>>(base?: I): Shop {
    return Shop.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Shop>, I>>(object: I): Shop {
    const message = createBaseShop();
    message.id = object.id ?? "";
    message.shopNo = object.shopNo ?? "";
    message.cbdId = object.cbdId ?? "";
    message.partId = object.partId ?? "";
    message.type = object.type ?? ShopType.SHOP_TYPE_UNSPECIFIED;
    message.typeTag = object.typeTag ?? undefined;
    message.businessType = object.businessType ?? BusinessType.BUSINESS_TYPE_UNSPECIFIED;
    message.trademark = object.trademark ?? "";
    message.branch = object.branch ?? undefined;
    message.location = object.location?.map((e) => e) || [];
    message.verified = object.verified ?? false;
    message.duration = object.duration ?? OperationDuration.OPERATION_DURATION_UNSPECIFIED;
    message.consumeDisplay = object.consumeDisplay ?? false;
    message.averageExpense = object.averageExpense?.map((e) => e) || [];
    message.sex = object.sex ?? Gender.GENDER_UNSPECIFIED;
    message.age = object.age?.map((e) => e) || [];
    message.idTag = object.idTag ?? undefined;
    message.signPhoto = object.signPhoto ?? undefined;
    message.verifyPhoto = object.verifyPhoto?.map((e) => e) || [];
    message.environmentPhoto = object.environmentPhoto?.map((e) => e) || [];
    message.buildingPhoto = object.buildingPhoto?.map((e) => e) || [];
    message.brandPhoto = object.brandPhoto?.map((e) => e) || [];
    message.contactName = object.contactName ?? undefined;
    message.contactPhone = object.contactPhone ?? undefined;
    message.contactType = object.contactType ?? undefined;
    message.totalArea = object.totalArea ?? undefined;
    message.customerArea = object.customerArea ?? undefined;
    message.clerkCount = object.clerkCount ?? undefined;
    message.businessHours = object.businessHours?.map((e) => e) || [];
    message.restDays = object.restDays?.map((e) => e) || [];
    message.volumePeak = object.volumePeak?.map((e) => e) || [];
    message.season = object.season?.map((e) => e) || [];
    message.shopDescription = object.shopDescription ?? undefined;
    message.putDescription = object.putDescription ?? undefined;
    message.displayed = object.displayed ?? false;
    message.priceBase = object.priceBase ?? 0;
    message.classifyTag = object.classifyTag ?? undefined;
    message.remark = object.remark ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseSpace(): Space {
  return {
    id: "",
    shopId: "",
    type: SpaceType.SPACE_TYPE_UNSPECIFIED,
    setting: {},
    count: 0,
    state: SpaceState.SPACE_STATE_UNSPECIFIED,
    priceFactor: 0,
    tag: undefined,
    site: undefined,
    stability: undefined,
    photo: [],
    description: undefined,
    designAttention: undefined,
    constructionAttention: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Space: MessageFns<Space> = {
  encode(message: Space, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.shopId !== "") {
      writer.uint32(18).string(message.shopId);
    }
    if (message.type !== SpaceType.SPACE_TYPE_UNSPECIFIED) {
      writer.uint32(24).int32(spaceTypeToNumber(message.type));
    }
    Object.entries(message.setting).forEach(([key, value]) => {
      Space_SettingEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.count !== 0) {
      writer.uint32(40).int32(message.count);
    }
    if (message.state !== SpaceState.SPACE_STATE_UNSPECIFIED) {
      writer.uint32(48).int32(spaceStateToNumber(message.state));
    }
    if (message.priceFactor !== 0) {
      writer.uint32(61).float(message.priceFactor);
    }
    if (message.tag !== undefined) {
      writer.uint32(66).string(message.tag);
    }
    if (message.site !== undefined) {
      writer.uint32(72).int32(spaceSiteToNumber(message.site));
    }
    if (message.stability !== undefined) {
      writer.uint32(80).int32(spaceStabilityToNumber(message.stability));
    }
    for (const v of message.photo) {
      writer.uint32(90).string(v!);
    }
    if (message.description !== undefined) {
      writer.uint32(98).string(message.description);
    }
    if (message.designAttention !== undefined) {
      writer.uint32(106).string(message.designAttention);
    }
    if (message.constructionAttention !== undefined) {
      writer.uint32(114).string(message.constructionAttention);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(122).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Space {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shopId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = spaceTypeFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = Space_SettingEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.setting[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.state = spaceStateFromJSON(reader.int32());
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.priceFactor = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.site = spaceSiteFromJSON(reader.int32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.stability = spaceStabilityFromJSON(reader.int32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.photo.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.designAttention = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.constructionAttention = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Space {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      shopId: isSet(object.shopId) ? globalThis.String(object.shopId) : "",
      type: isSet(object.type) ? spaceTypeFromJSON(object.type) : SpaceType.SPACE_TYPE_UNSPECIFIED,
      setting: isObject(object.setting)
        ? Object.entries(object.setting).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      state: isSet(object.state) ? spaceStateFromJSON(object.state) : SpaceState.SPACE_STATE_UNSPECIFIED,
      priceFactor: isSet(object.priceFactor) ? globalThis.Number(object.priceFactor) : 0,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : undefined,
      site: isSet(object.site) ? spaceSiteFromJSON(object.site) : undefined,
      stability: isSet(object.stability) ? spaceStabilityFromJSON(object.stability) : undefined,
      photo: globalThis.Array.isArray(object?.photo) ? object.photo.map((e: any) => globalThis.String(e)) : [],
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      designAttention: isSet(object.designAttention) ? globalThis.String(object.designAttention) : undefined,
      constructionAttention: isSet(object.constructionAttention)
        ? globalThis.String(object.constructionAttention)
        : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Space): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.shopId !== "") {
      obj.shopId = message.shopId;
    }
    if (message.type !== SpaceType.SPACE_TYPE_UNSPECIFIED) {
      obj.type = spaceTypeToJSON(message.type);
    }
    if (message.setting) {
      const entries = Object.entries(message.setting);
      if (entries.length > 0) {
        obj.setting = {};
        entries.forEach(([k, v]) => {
          obj.setting[k] = v;
        });
      }
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.state !== SpaceState.SPACE_STATE_UNSPECIFIED) {
      obj.state = spaceStateToJSON(message.state);
    }
    if (message.priceFactor !== 0) {
      obj.priceFactor = message.priceFactor;
    }
    if (message.tag !== undefined) {
      obj.tag = message.tag;
    }
    if (message.site !== undefined) {
      obj.site = spaceSiteToJSON(message.site);
    }
    if (message.stability !== undefined) {
      obj.stability = spaceStabilityToJSON(message.stability);
    }
    if (message.photo?.length) {
      obj.photo = message.photo;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.designAttention !== undefined) {
      obj.designAttention = message.designAttention;
    }
    if (message.constructionAttention !== undefined) {
      obj.constructionAttention = message.constructionAttention;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Space>, I>>(base?: I): Space {
    return Space.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Space>, I>>(object: I): Space {
    const message = createBaseSpace();
    message.id = object.id ?? "";
    message.shopId = object.shopId ?? "";
    message.type = object.type ?? SpaceType.SPACE_TYPE_UNSPECIFIED;
    message.setting = Object.entries(object.setting ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.count = object.count ?? 0;
    message.state = object.state ?? SpaceState.SPACE_STATE_UNSPECIFIED;
    message.priceFactor = object.priceFactor ?? 0;
    message.tag = object.tag ?? undefined;
    message.site = object.site ?? undefined;
    message.stability = object.stability ?? undefined;
    message.photo = object.photo?.map((e) => e) || [];
    message.description = object.description ?? undefined;
    message.designAttention = object.designAttention ?? undefined;
    message.constructionAttention = object.constructionAttention ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseSpace_SettingEntry(): Space_SettingEntry {
  return { key: "", value: "" };
}

export const Space_SettingEntry: MessageFns<Space_SettingEntry> = {
  encode(message: Space_SettingEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Space_SettingEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpace_SettingEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Space_SettingEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Space_SettingEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Space_SettingEntry>, I>>(base?: I): Space_SettingEntry {
    return Space_SettingEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Space_SettingEntry>, I>>(object: I): Space_SettingEntry {
    const message = createBaseSpace_SettingEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAuditLog(): AuditLog {
  return {
    id: "",
    operationType: OperationType.OPERATION_TYPE_UNSPECIFIED,
    targetType: OperationTarget.OPERATION_TARGET_UNSPECIFIED,
    targetId: "",
    targetName: "",
    content: "",
    operatorId: "",
    operatorName: "",
    operationTime: undefined,
    details: {},
    ipAddress: undefined,
    userAgent: undefined,
  };
}

export const AuditLog: MessageFns<AuditLog> = {
  encode(message: AuditLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.operationType !== OperationType.OPERATION_TYPE_UNSPECIFIED) {
      writer.uint32(16).int32(operationTypeToNumber(message.operationType));
    }
    if (message.targetType !== OperationTarget.OPERATION_TARGET_UNSPECIFIED) {
      writer.uint32(24).int32(operationTargetToNumber(message.targetType));
    }
    if (message.targetId !== "") {
      writer.uint32(34).string(message.targetId);
    }
    if (message.targetName !== "") {
      writer.uint32(42).string(message.targetName);
    }
    if (message.content !== "") {
      writer.uint32(50).string(message.content);
    }
    if (message.operatorId !== "") {
      writer.uint32(58).string(message.operatorId);
    }
    if (message.operatorName !== "") {
      writer.uint32(66).string(message.operatorName);
    }
    if (message.operationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.operationTime), writer.uint32(74).fork()).join();
    }
    Object.entries(message.details).forEach(([key, value]) => {
      AuditLog_DetailsEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    if (message.ipAddress !== undefined) {
      writer.uint32(90).string(message.ipAddress);
    }
    if (message.userAgent !== undefined) {
      writer.uint32(98).string(message.userAgent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operationType = operationTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetType = operationTargetFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.targetId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.targetName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.operatorId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.operatorName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.operationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = AuditLog_DetailsEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.details[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditLog {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      operationType: isSet(object.operationType)
        ? operationTypeFromJSON(object.operationType)
        : OperationType.OPERATION_TYPE_UNSPECIFIED,
      targetType: isSet(object.targetType)
        ? operationTargetFromJSON(object.targetType)
        : OperationTarget.OPERATION_TARGET_UNSPECIFIED,
      targetId: isSet(object.targetId) ? globalThis.String(object.targetId) : "",
      targetName: isSet(object.targetName) ? globalThis.String(object.targetName) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      operatorId: isSet(object.operatorId) ? globalThis.String(object.operatorId) : "",
      operatorName: isSet(object.operatorName) ? globalThis.String(object.operatorName) : "",
      operationTime: isSet(object.operationTime) ? fromJsonTimestamp(object.operationTime) : undefined,
      details: isObject(object.details)
        ? Object.entries(object.details).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : undefined,
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : undefined,
    };
  },

  toJSON(message: AuditLog): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.operationType !== OperationType.OPERATION_TYPE_UNSPECIFIED) {
      obj.operationType = operationTypeToJSON(message.operationType);
    }
    if (message.targetType !== OperationTarget.OPERATION_TARGET_UNSPECIFIED) {
      obj.targetType = operationTargetToJSON(message.targetType);
    }
    if (message.targetId !== "") {
      obj.targetId = message.targetId;
    }
    if (message.targetName !== "") {
      obj.targetName = message.targetName;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.operatorId !== "") {
      obj.operatorId = message.operatorId;
    }
    if (message.operatorName !== "") {
      obj.operatorName = message.operatorName;
    }
    if (message.operationTime !== undefined) {
      obj.operationTime = message.operationTime.toISOString();
    }
    if (message.details) {
      const entries = Object.entries(message.details);
      if (entries.length > 0) {
        obj.details = {};
        entries.forEach(([k, v]) => {
          obj.details[k] = v;
        });
      }
    }
    if (message.ipAddress !== undefined) {
      obj.ipAddress = message.ipAddress;
    }
    if (message.userAgent !== undefined) {
      obj.userAgent = message.userAgent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditLog>, I>>(base?: I): AuditLog {
    return AuditLog.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditLog>, I>>(object: I): AuditLog {
    const message = createBaseAuditLog();
    message.id = object.id ?? "";
    message.operationType = object.operationType ?? OperationType.OPERATION_TYPE_UNSPECIFIED;
    message.targetType = object.targetType ?? OperationTarget.OPERATION_TARGET_UNSPECIFIED;
    message.targetId = object.targetId ?? "";
    message.targetName = object.targetName ?? "";
    message.content = object.content ?? "";
    message.operatorId = object.operatorId ?? "";
    message.operatorName = object.operatorName ?? "";
    message.operationTime = object.operationTime ?? undefined;
    message.details = Object.entries(object.details ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.ipAddress = object.ipAddress ?? undefined;
    message.userAgent = object.userAgent ?? undefined;
    return message;
  },
};

function createBaseAuditLog_DetailsEntry(): AuditLog_DetailsEntry {
  return { key: "", value: "" };
}

export const AuditLog_DetailsEntry: MessageFns<AuditLog_DetailsEntry> = {
  encode(message: AuditLog_DetailsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditLog_DetailsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditLog_DetailsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditLog_DetailsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AuditLog_DetailsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditLog_DetailsEntry>, I>>(base?: I): AuditLog_DetailsEntry {
    return AuditLog_DetailsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditLog_DetailsEntry>, I>>(object: I): AuditLog_DetailsEntry {
    const message = createBaseAuditLog_DetailsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAuditLogList(): AuditLogList {
  return { items: [], total: 0, page: 0, pageSize: 0, totalPages: 0 };
}

export const AuditLogList: MessageFns<AuditLogList> = {
  encode(message: AuditLogList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      AuditLog.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.totalPages !== 0) {
      writer.uint32(40).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditLogList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditLogList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(AuditLog.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditLogList {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => AuditLog.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: AuditLogList): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => AuditLog.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditLogList>, I>>(base?: I): AuditLogList {
    return AuditLogList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditLogList>, I>>(object: I): AuditLogList {
    const message = createBaseAuditLogList();
    message.items = object.items?.map((e) => AuditLog.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
